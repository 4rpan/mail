import { type } from 'arktype';

export const ErrorValue = type({
	success: 'false',
	'errors?': 'string[]',
	message: 'string',
});

export const SuccessValue = type({
	success: 'true',
	message: 'string',
});

export const MailBody = type({
	/**
	 * looks like traditional (SMTP) email addresses
	 * `sender@server.tld`
	 */
	from: 'string.email',
	/**
	 * relays mail to moh or even forward to SMTP server if moh enpoint is unreachable;
	 * `reciever@server.tld`
	 */
	to: 'string.email',
	/**
	 * unix second
	 */
	'at?': 'string.date.iso',
	/**
	 * unencrypted title
	 */
	subject: 'string',
	/**
	 * `id` (mail id) generated by sender for the recipient's server
	 */
	id: 'string.alphanumeric',
	/**
	 * id provided by sender for reciever (generated by reciever or generated with a specified pattern)
	 * eg, `mail://reciever@server.tld/ref?payment108`
	 */
	'ref?': 'string.alphanumeric',
	/**
	 * ideally mandatory
	 * but if sending from an smtp address, it can be blank, then server encrypts & store encrypted content value.
	 * signature uses concatenated 'from', 'at', 'subject' as message
	 * if valid moh address exists, it'll throw an error for "invalid signature"
	 */
	'signature?': 'string.base64',
	/**
	 * encrypted content (base64 data uri with content type & charset)
	 */
	content: 'string.base64.url',
	/**
	 * meta fields
	 * eg, { threadId: 123, replyingTo: xyz }
	 */
	'metadata?': 'Record<string, unknown>',
});

export const SendMailInput = MailBody;
export const SendMailOutput = type.or(
	ErrorValue,
	type({
		'...': SuccessValue,
		data: {
			id: 'string',
		},
	}),
);

export const GetMailInput = type({
	id: 'string.alphanumeric',
	username: 'string.alphanumeric',
	'markAsUnread?': 'boolean',
	'backup?': 'boolean',
});

export const GetMailStatusInput = type({
	id: 'string.alphanumeric',
	username: 'string.alphanumeric',
});
export const GetMailStatusOutput = type.or(ErrorValue, {
	'...': SuccessValue,
	data: {
		status: "'sent'|'unread'|'read'",
	},
});
export const GetMailOutput = type.or(
	ErrorValue,
	type({
		'...': SuccessValue,
		data: {
			mail: MailBody,
			'isSignatureVarified?': 'boolean',
		},
	}),
);
export const GetMailBulkInput = type({
	username: 'string.alphanumeric',
	ids: 'string.alphanumeric[]',
	'markAsUnread?': 'boolean',
	'backup?': 'boolean',
});

export const GetMailBulkOutput = type.or(
	ErrorValue,
	type({
		'...': SuccessValue,
		data: {
			mails: MailBody.array(),
			'isSignatureVarified?': 'boolean',
		},
	}),
);

export const ListMailInput = type({
	username: 'string.alphanumeric',
	type: "'unread'|'new'|'saved' = 'new'",
	signature: 'string',
});

export const ListMailOutput = type.or(ErrorValue, {
	'...': SuccessValue,
	data: {
		ids: 'string[]',
	},
});

export const GetCipherInput = type({
	username: 'string.alphanumeric',
});
export const GetCipherOutput = type.or(
	ErrorValue,
	type({
		'...': SuccessValue,
		data: {
			pubkey: 'string',
		},
	}),
);

export const SetCipherInput = type({
	pubkey: 'string.hex == 64',
	ttl: 'number.epoch',
});
export const SetCipherOutput = type.or(ErrorValue, SuccessValue);
